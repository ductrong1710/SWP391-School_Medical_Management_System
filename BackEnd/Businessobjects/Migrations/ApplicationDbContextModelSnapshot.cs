// <auto-generated />
using System;
using Businessobjects.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Businessobjects.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Businessobjects.Models.HealthCheckConsentForm", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ConsentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthCheckPlanID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("HealthCheckPlanID");

                    b.Property<string>("ParentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ParentID");

                    b.Property<string>("ReasonForDenial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StudentID");

                    b.HasKey("ID");

                    b.HasIndex("HealthCheckPlanID");

                    b.HasIndex("ParentID");

                    b.HasIndex("StudentID");

                    b.ToTable("Health_Check_Consent_Form", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.HealthCheckResult", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<int?>("BloodPressure")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckUpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Checker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckupType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Eyesight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HealthCheckConsentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("HealthCheckConsentID");

                    b.Property<string>("HealthFacility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hearing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeartRate")
                        .HasColumnType("int");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool?>("NeedToContactParent")
                        .HasColumnType("bit");

                    b.Property<string>("OralHealth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Spine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("ID");

                    b.HasIndex("HealthCheckConsentID")
                        .IsUnique();

                    b.ToTable("Health_Check_Result", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.HealthRecord", b =>
                {
                    b.Property<string>("HealthRecordID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("HealthRecordID");

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChronicDiseases")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Chronic_Diseases");

                    b.Property<int?>("Eyesight")
                        .HasColumnType("int");

                    b.Property<int?>("Hearing")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ParentID");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StudentID");

                    b.Property<string>("TreatmentHistory")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Treatment_History");

                    b.Property<string>("VaccinationHistory")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Vaccination_History");

                    b.HasKey("HealthRecordID");

                    b.HasIndex("ParentID");

                    b.HasIndex("StudentID");

                    b.ToTable("Health_Record", (string)null);

                    b.HasData(
                        new
                        {
                            HealthRecordID = "a2b4c6d8-e0f2-4681-9314-123456789012",
                            Allergies = "None",
                            ChronicDiseases = "None",
                            Eyesight = 20,
                            Hearing = 20,
                            Note = "Healthy student",
                            ParentContact = "0987654321",
                            ParentID = "P12345",
                            StudentID = "f5b7824f-5e35-4682-98d1-0e98f8dd6b31",
                            TreatmentHistory = "No major treatments",
                            VaccinationHistory = "Up to date"
                        });
                });

            modelBuilder.Entity("Businessobjects.Models.IncidentInvolvement", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Injuries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvolvementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalIncidentID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MedicalIncidentID");

                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StudentID");

                    b.Property<DateTime?>("TreatmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TreatmentRequired")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MedicalIncidentID");

                    b.HasIndex("StudentID");

                    b.ToTable("IncidentInvolvement", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.MedicalIncident", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ActionTaken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowUpRequired")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("IncidentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncidentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalStaffID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MedicalStaffID");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MedicalStaffID");

                    b.ToTable("MedicalIncident", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.MedicalSupply", b =>
                {
                    b.Property<string>("SupplyID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SupplyID");

                    b.Property<int?>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplyID");

                    b.ToTable("Medical_Supply", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.Medication", b =>
                {
                    b.Property<string>("MedicationID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MedicationID");

                    b.Property<int?>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationID");

                    b.ToTable("Medication", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.MedicationReceipt", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalStaffID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MedicalStaffID");

                    b.Property<string>("MedicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationSubmissionFormID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MedicationSubmissionFormID");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ParentID");

                    b.Property<DateTime?>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SideEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MedicalStaffID");

                    b.HasIndex("MedicationSubmissionFormID");

                    b.HasIndex("ParentID");

                    b.ToTable("Medication_Receipt", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.MedicationSubmissionForm", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ConsumptionTime")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Consumption_Time");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Medication_Name");

                    b.Property<string>("ParentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ParentID");

                    b.Property<string>("ParentsNote")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Parents_Note");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StudentID");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.HasIndex("StudentID");

                    b.ToTable("Medication_Submission_Form", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.Notification", b =>
                {
                    b.Property<string>("NotificationID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("NotificationID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HealthCheckConsentFormId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationID");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.PeriodicHealthCheckPlan", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("CheckupContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CreatorID");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreatorID");

                    b.ToTable("Periodic_Health_Check_Plan", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.Profile", b =>
                {
                    b.Property<string>("ProfileID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ProfileID");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date_Of_Birth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ProfileID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Profile", (string)null);

                    b.HasData(
                        new
                        {
                            ProfileID = "f5b7824f-5e35-4682-98d1-0e98f8dd6b31",
                            Class = "Admin Class",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin User",
                            Note = "Admin profile",
                            Phone = "1234567890",
                            Sex = "Male",
                            UserID = "c9d4c053-49b6-410c-bc78-2d54a9991870"
                        });
                });

            modelBuilder.Entity("Businessobjects.Models.Role", b =>
                {
                    b.Property<string>("RoleID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoleID");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleID = "1",
                            RoleType = "Admin"
                        },
                        new
                        {
                            RoleID = "2",
                            RoleType = "User"
                        },
                        new
                        {
                            RoleID = "3",
                            RoleType = "Nurse"
                        },
                        new
                        {
                            RoleID = "4",
                            RoleType = "Teacher"
                        });
                });

            modelBuilder.Entity("Businessobjects.Models.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoleID");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserID = "c9d4c053-49b6-410c-bc78-2d54a9991870",
                            Password = "admin123",
                            RoleID = "1",
                            Username = "admin"
                        },
                        new
                        {
                            UserID = "d8663e5e-7494-4f81-8739-6e0de1bea7ee",
                            Password = "user123",
                            RoleID = "2",
                            Username = "user"
                        },
                        new
                        {
                            UserID = "b9e7d454-99df-4506-8c0f-3b2c33c21d12",
                            Password = "nurse123",
                            RoleID = "3",
                            Username = "nurse"
                        });
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationConsentForm", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("ConsentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ParentID");

                    b.Property<string>("ReasonForDenial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StudentID");

                    b.Property<string>("VaccinationPlanID")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("VaccinationPlanID");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.HasIndex("StudentID");

                    b.HasIndex("VaccinationPlanID");

                    b.ToTable("Vaccination_Consent_Form", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationConsultation", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("ConsultationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConsultationNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsultationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalStaffID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MedicalStaffID");

                    b.Property<string>("ParentID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ParentID");

                    b.Property<string>("Recommendations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StudentID");

                    b.Property<string>("VaccinationHealthCheckID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("VaccinationHealthCheckID");

                    b.HasKey("ID");

                    b.HasIndex("MedicalStaffID");

                    b.HasIndex("ParentID");

                    b.HasIndex("StudentID");

                    b.HasIndex("VaccinationHealthCheckID");

                    b.ToTable("Vaccination_Consultation", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationHealthCheck", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<string>("AllergyDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChronicConditionDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasAllergies")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasChronicConditions")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasRecentIllness")
                        .HasColumnType("bit");

                    b.Property<string>("IneligibilityReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsEligibleForVaccination")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalStaffNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParentID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ParentID");

                    b.Property<string>("ParentNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecentIllnessDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StudentID");

                    b.Property<string>("VaccinationPlanID")
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("VaccinationPlanID");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.HasIndex("StudentID");

                    b.HasIndex("VaccinationPlanID");

                    b.ToTable("Vaccination_Health_Check", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationPlan", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("ID");

                    b.Property<string>("CreatorID")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("CreatorID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CreatorID");

                    b.ToTable("Vaccination_Plan", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationResult", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("ActualVaccinationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConsentFormID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ConsentFormID");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Performer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostVaccinationReaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VaccineTypeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("VaccineTypeID");

                    b.HasKey("ID");

                    b.HasIndex("ConsentFormID")
                        .IsUnique();

                    b.HasIndex("VaccineTypeID");

                    b.ToTable("Vaccination_Result", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.VaccineType", b =>
                {
                    b.Property<string>("VaccinationID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("VaccinationID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VaccinationID");

                    b.ToTable("Vaccine_Type", (string)null);
                });

            modelBuilder.Entity("Businessobjects.Models.HealthCheckConsentForm", b =>
                {
                    b.HasOne("Businessobjects.Models.PeriodicHealthCheckPlan", "HealthCheckPlan")
                        .WithMany("ConsentForms")
                        .HasForeignKey("HealthCheckPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Businessobjects.Models.User", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Businessobjects.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheckPlan");

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Businessobjects.Models.HealthCheckResult", b =>
                {
                    b.HasOne("Businessobjects.Models.HealthCheckConsentForm", "HealthCheckConsent")
                        .WithOne()
                        .HasForeignKey("Businessobjects.Models.HealthCheckResult", "HealthCheckConsentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheckConsent");
                });

            modelBuilder.Entity("Businessobjects.Models.HealthRecord", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Businessobjects.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Businessobjects.Models.IncidentInvolvement", b =>
                {
                    b.HasOne("Businessobjects.Models.MedicalIncident", "MedicalIncident")
                        .WithMany()
                        .HasForeignKey("MedicalIncidentID");

                    b.HasOne("Businessobjects.Models.User", "Student")
                        .WithMany("IncidentInvolvements")
                        .HasForeignKey("StudentID");

                    b.Navigation("MedicalIncident");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Businessobjects.Models.MedicalIncident", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "MedicalStaff")
                        .WithMany("MedicalIncidents")
                        .HasForeignKey("MedicalStaffID");

                    b.Navigation("MedicalStaff");
                });

            modelBuilder.Entity("Businessobjects.Models.MedicationReceipt", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "MedicalStaff")
                        .WithMany("MedicalStaffMedicationReceipts")
                        .HasForeignKey("MedicalStaffID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Businessobjects.Models.MedicationSubmissionForm", "MedicationSubmissionForm")
                        .WithMany("MedicationReceipts")
                        .HasForeignKey("MedicationSubmissionFormID");

                    b.HasOne("Businessobjects.Models.User", "Parent")
                        .WithMany("ParentMedicationReceipts")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MedicalStaff");

                    b.Navigation("MedicationSubmissionForm");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Businessobjects.Models.MedicationSubmissionForm", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Businessobjects.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Businessobjects.Models.PeriodicHealthCheckPlan", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Businessobjects.Models.Profile", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Businessobjects.Models.Profile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Businessobjects.Models.User", b =>
                {
                    b.HasOne("Businessobjects.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationConsentForm", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Businessobjects.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Businessobjects.Models.VaccinationPlan", "VaccinationPlan")
                        .WithMany("ConsentForms")
                        .HasForeignKey("VaccinationPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");

                    b.Navigation("VaccinationPlan");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationConsultation", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "MedicalStaff")
                        .WithMany("MedicalStaffVaccinationConsultations")
                        .HasForeignKey("MedicalStaffID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Businessobjects.Models.User", "Parent")
                        .WithMany("ParentVaccinationConsultations")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Businessobjects.Models.User", "Student")
                        .WithMany("StudentVaccinationConsultations")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Businessobjects.Models.VaccinationHealthCheck", "VaccinationHealthCheck")
                        .WithMany()
                        .HasForeignKey("VaccinationHealthCheckID");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Parent");

                    b.Navigation("Student");

                    b.Navigation("VaccinationHealthCheck");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationHealthCheck", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "Parent")
                        .WithMany("ParentVaccinationHealthChecks")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Businessobjects.Models.User", "Student")
                        .WithMany("StudentVaccinationHealthChecks")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Businessobjects.Models.VaccinationPlan", "VaccinationPlan")
                        .WithMany("VaccinationHealthChecks")
                        .HasForeignKey("VaccinationPlanID");

                    b.Navigation("Parent");

                    b.Navigation("Student");

                    b.Navigation("VaccinationPlan");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationPlan", b =>
                {
                    b.HasOne("Businessobjects.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationResult", b =>
                {
                    b.HasOne("Businessobjects.Models.VaccinationConsentForm", "ConsentForm")
                        .WithOne("VaccinationResult")
                        .HasForeignKey("Businessobjects.Models.VaccinationResult", "ConsentFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Businessobjects.Models.VaccineType", "VaccineType")
                        .WithMany("VaccinationResults")
                        .HasForeignKey("VaccineTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConsentForm");

                    b.Navigation("VaccineType");
                });

            modelBuilder.Entity("Businessobjects.Models.MedicationSubmissionForm", b =>
                {
                    b.Navigation("MedicationReceipts");
                });

            modelBuilder.Entity("Businessobjects.Models.PeriodicHealthCheckPlan", b =>
                {
                    b.Navigation("ConsentForms");
                });

            modelBuilder.Entity("Businessobjects.Models.User", b =>
                {
                    b.Navigation("IncidentInvolvements");

                    b.Navigation("MedicalIncidents");

                    b.Navigation("MedicalStaffMedicationReceipts");

                    b.Navigation("MedicalStaffVaccinationConsultations");

                    b.Navigation("ParentMedicationReceipts");

                    b.Navigation("ParentVaccinationConsultations");

                    b.Navigation("ParentVaccinationHealthChecks");

                    b.Navigation("StudentVaccinationConsultations");

                    b.Navigation("StudentVaccinationHealthChecks");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationConsentForm", b =>
                {
                    b.Navigation("VaccinationResult");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccinationPlan", b =>
                {
                    b.Navigation("ConsentForms");

                    b.Navigation("VaccinationHealthChecks");
                });

            modelBuilder.Entity("Businessobjects.Models.VaccineType", b =>
                {
                    b.Navigation("VaccinationResults");
                });
#pragma warning restore 612, 618
        }
    }
}
